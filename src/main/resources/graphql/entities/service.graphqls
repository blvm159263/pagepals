type Service {
    id: ID!
    price: Int
    createdAt: String
    shortDescription: String
    description: String
    duration: Float
    totalOfReview: Int
    totalOfBooking: Int
    imageUrl: String
    rating: Int
    status: Status
    reader: Reader
    book: Book
    serviceType: ServiceType
    bookings: [Booking]
}

input QueryInput {
    search: String
    sort: String
    page: Int
    pageSize: Int
}

type ListService{
    services: [Service]
    paging: Paging
}

extend type Query {
    serviceById(id: ID!): Service
    getServicesByReader(readerId: ID!, filter: QueryInput): ListService
    getServicesByBook(bookId: ID!, readerId: ID, filter: QueryInput): ListService
    getListServiceByServiceTypeAndBookAndReader(serviceTypeId: ID!, bookId: ID!, readerId: ID!): [Service]
}

input ServiceInput {
    price: Float
    shortDescription: String
    description: String
    duration: Float
    readerId: ID!
    serviceTypeId: ID!
    imageUrl: String
    book: GoogleBookInput
}

input ServiceUpdate {
    price: Float
    shortDescription: String
    description: String
    serviceTypeId: ID
    imageUrl: String
}

extend type Mutation {
    updateService(
        id: ID!
        service: ServiceUpdate
    ): Service
    keepBookingAndUpdateService(
        id: ID!
        service: ServiceUpdate
    ): Service
    deleteService(id: ID!): String
    keepBookingAndDeleteService(id: ID!): String
    createService(service: ServiceInput): Service
}



