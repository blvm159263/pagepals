type Account {
    id: ID!
    username: String
    password: String
    email: String
    fullName: String
    phoneNumber: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
    accountState: AccountState
    customer: Customer
    reader: Reader
    role: Role
    wallets: [Wallet]
}

type AccountRead {
    id: ID!
    username: String
    email: String
    fullName: String
    phoneNumber: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
    accountState: AccountState
    customer: Customer
    reader: Reader
    role: Role
    wallets: [Wallet]
}

type LoginResponse {
    accessToken: String
    refreshToken: String
}

type LoginStaffResponse {
    username: String,
    password: String,
    accessToken: String
    refreshToken: String
}

input RegisterRequest {
    email: String
    username: String!
    password: String!
}

input LoginRequest {
    username: String!
    password: String!
}

input AccountUpdate {
    username: String
    password: String
    email: String
    fullName: String
    phoneNumber: String
    accountState: String
}
input AccountStaffCreate {
    username: String!
    email: String!
    fullName: String!
    phoneNumber: String!
}

extend type Query {
    getAccount(id: ID!): Account
    getAccountByUsername(username: String!): AccountRead
    getListStaff: [Account]
    getListCustomer: [Account]
    getListReader: [Account]
}

extend type Mutation {
    login(account: LoginRequest): LoginResponse
    loginWithGoogle(token: String!): LoginResponse
    register(register: RegisterRequest): LoginResponse
    verifyEmailRegister(register: RegisterRequest): String
    registerStaff(staff: AccountStaffCreate!): Account
    refreshToken: LoginResponse
    updateAccount(id: ID!, account: AccountUpdate): Account
    updateAccountState(id: ID!, accountState: String): Account

}