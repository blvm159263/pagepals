type WorkingTime {
    id: ID!
    date: String
    startTime: String
    endTime: String
    reader: Reader
}

input WorkingTimeCreateInput {
    date: String
    startTime: String
    duration: Int
}

input WorkingTimeListCreateInput{
    readerId: ID!
    list: [WorkingTimeCreateInput]
    isWeekly: Boolean
}

type WorkingTimeList{
    workingDates: [WorkingDate]
}

type WorkingDate {
    date: String
    timeSlots: [TimeSlot]
}

type TimeSlot {
    id: ID
    startTime: String
    endTime: String
    isSeminar: Boolean
}

extend type Query {
    getWorkingTimesAvailableByReader(readerId: ID!): WorkingTimeList
    getReaderWorkingTimes(readerId: ID!): WorkingTimeList
}

extend type Mutation {
    createReaderWorkingTime(workingTime: WorkingTimeListCreateInput!): String
}