type Reader {
    id: ID!
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    totalOfReviews: String
    totalOfBookings: String
    introductionVideoUrl: String
    experience: Float
    tags: String
    createdAt: String
    updatedAt: String
    deletedAt: String
    status: Status
    level: Level
    account: Account
    workingTimes: [WorkingTime]
    services: [Service]
    follows: [Follow]
    promotions: [Promotion]
    requests: [Request]
    meetings: [Meeting]
}

type ReaderRead{
    id: ID!
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    totalOfReviews: String
    totalOfBookings: String
    introductionVideoUrl: String
    experience: Float
    tags: String
    createdAt: String
    updatedAt: String
    deletedAt: String
    status: Status
    level: Level
    account: AccountRead
    services: [Service]
    follows: [Follow]
}

type ReaderProfile{
    profile: ReaderRead
    workingTimeList: WorkingTimeList
}

type listReader {
    pagination: Paging
    list: [Reader]
}

type ReaderBook{
    book: Book
    chapters: [Chapter]
}

input ReaderUpdate{
    nickname: String
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    introductionVideoUrl: String
    tags: String
}

input searchReaderInput {
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    sort: String
    page: Int
    pageSize: Int
}

extend type Query {
    getReadersActive: [Reader]
    getReaderDetail(id: ID!): Reader
    getListReaders(query: searchReaderInput): listReader
    getListServicesOfReader(id: ID!): [Service]
    getReaderProfile(id: ID!): ReaderProfile
    getReaderBooks(id: ID!): [ReaderBook]
}

extend type Mutation {
    updateReader(id: ID!, data: ReaderUpdate): Reader
}