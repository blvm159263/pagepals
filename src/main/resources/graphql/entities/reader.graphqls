type Reader {
    id: ID!
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    totalOfReviews: Int
    totalOfBookings: Int
    introductionVideoUrl: String
    thumbnailUrl: String
    avatarUrl: String
    createdAt: String
    updatedAt: String
    deletedAt: String
    status: Status
    account: Account
    readerRequestReference: Reader
    workingTimes: [WorkingTime]
    services: [Service]
    requests: [Request]
}

type ReaderRead{
    id: ID!
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    totalOfReviews: Int
    totalOfBookings: Int
    introductionVideoUrl: String
    thumbnailUrl: String
    avatarUrl: String
    createdAt: String
    updatedAt: String
    deletedAt: String
    status: Status
    account: AccountRead
    readerRequestReference: ReaderRead
    services: [Service]
}

type ReaderProfile{
    profile: ReaderRead
    workingTimeList: WorkingTimeList
}

type listReader {
    pagination: Paging
    list: [Reader]
}

type ReaderBook{
    book: Book
    services: [Service]
    servicesCount: Int
    ratingAverage: Int
    totalReview: Int
    serviceMinPrice: Int
    serviceMaxPrice: Int
    status: String
}

input ReaderBookFilter{
    title: String
    page: Int
    pageSize: Int
}

type ReaderBookList{
    paging: Paging
    list: [ReaderBook]
}

type ReaderReview{
    customer: Customer
    date: String
    service: Service
    rating: Int
    review: String
}

type ListReaderReview{
    pagination: Paging
    list: [ReaderReview]
}

input ReaderUpdate{
    nickname: String
    genre: String
    language: String
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    introductionVideoUrl: String
    thumbnailUrl: String
    avatarUrl: String
}

input searchReaderInput {
    nickname: String
    rating: Int
    genre: String
    language: String
    countryAccent: String
    sort: String
    page: Int
    pageSize: Int
}

input ReaderRequestInput {
    nickname: String
    genres: [String]
    languages: [String]
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    introductionVideoUrl: String
    thumbnailUrl: String
    avatarUrl: String
}

type ReaderRequestRead {
    id: ID!
    preference: Reader
    nickname: String
    genres: [String]
    languages: [String]
    countryAccent: String
    audioDescriptionUrl: String
    description: String
    introductionVideoUrl: String
    thumbnailUrl: String
    avatarUrl: String
}

type ListUpdateRequestedReader {
    list: [ReaderRequestRead]
    pagination: Paging
}

extend type Query {
    getReadersActive: [Reader]
    getReaderDetail(id: ID!): Reader
    getListReaders(query: searchReaderInput): listReader
    getListServicesOfReader(id: ID!): [Service]
    getReaderProfile(id: ID!): ReaderProfile
    getReaderBooks(id: ID!, filter: ReaderBookFilter): ReaderBookList
    getListPopularReaders: [Reader]
    getReaderReviews(readerId: ID!, page: Int, pageSize: Int): ListReaderReview
}

extend type Mutation {
    updateReader(id: ID!, data: ReaderRequestInput): String
    registerReader(accountId: ID, data: RequestInput): Reader
}