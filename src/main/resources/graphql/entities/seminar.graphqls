type Seminar {
    id: ID!
    title: String
    description: String
    imageUrl: String
    rejectReason: String
    duration: Int
    state: SeminarStatus
    createdAt: String
    updatedAt: String
    reader: Reader
    book: Book
    events: [Event]
}

type SeminarBooking {
    seminar: Seminar
    booking: Booking
}

type ListSeminarRequests{
    list: [Seminar]
    pagination: Paging
}

input SeminarRequestCreateInput {
    readerId: ID!
    book: GoogleBookInput
    title: String
    description: String
    imageUrl: String
    duration: Int
}

input SeminarRequestUpdateInput {
    id: ID!
    title: String
    description: String
    imageUrl: String
    duration: Int
}

extend type Query {
    getAllSeminarRequests(page: Int, pageSize: Int, sort: String, state: SeminarStatus): ListSeminarRequests
    getSeminarRequest(id: ID!): Seminar
    #    getAllSeminars(sort: String, page: Int, pageSize: Int, state: String): ListSeminar
    #    getAllSeminarsByReaderId(readerId: ID, sort: String, page: Int, pageSize: Int, state: String, isCustomer: Boolean): ListSeminar
    #    getAllSeminarsByCustomerId(customerId: ID, sort: String, page: Int, pageSize: Int): ListSeminar
    #    getAllSeminarsNotJoinByCustomerId(customerId: ID, sort: String, page: Int, pageSize: Int, state: String): ListSeminar
}

extend type Mutation {
    createSeminarRequest(create: SeminarRequestCreateInput): Seminar
    updateSeminarRequest(update: SeminarRequestUpdateInput): Seminar
    deleteSeminarRequest(id: ID!) : Seminar
    #    joinSeminar(customerId: ID, seminarId: ID): SeminarBooking
    #    completeSeminar(seminarId: ID): Seminar
}