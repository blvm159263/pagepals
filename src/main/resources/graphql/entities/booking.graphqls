type Booking {
    id: ID!
    totalPrice: Int
    promotionCode: String
    description: String
    review: String
    rating: Int
    createAt: String
    updateAt: String
    startAt: String
    customer: Customer
    meeting: Meeting
    state: BookingState
    workingTime: WorkingTime
    service: Service
    transactions: [Transaction]
}

type ListBooking{
    list: [Booking]
    pagination: Paging
}

input filterBooking{
    bookingState: String
    sort: String
    page: Int
    pageSize: Int
}

input BookingCreate {
    workingTimeId: ID
    totalPrice: Int
    promotionCode: String
    description: String
    serviceId: ID
}

input ReviewBooking {
    review: String
    rating: Int
}

extend type Query {
    getListBookingByCustomer(customerId: ID!, filter: filterBooking): ListBooking
    getListBookingByReader(readerId: ID!, filter: filterBooking): ListBooking
    getBookingById(bookingId: ID!): Booking
}

extend type Mutation {
    createBooking(customerId: ID, booking: BookingCreate): Booking
    cancelBooking(bookingId: ID): Booking
    completeBooking(bookingId: ID): Booking
    reviewBooking(bookingId: ID, review: ReviewBooking): Booking
}