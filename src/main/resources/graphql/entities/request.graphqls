type Request {
    id: ID!
    description: String
    state: RequestStateEnum
    createdAt: String
    updatedAt: String
    staffId: ID
    staffName: String
    rejectReason: String
    answers: [Answer]
    reader: ReaderRead
}

type Interview {
    id: ID!
    note: String
    interviewAt: String
    state: InterviewStateEnum
    result: InterviewResultEnum
    meeting: Meeting
    request: Request
}

enum InterviewStateEnum{
    PENDING
    DONE
    MISSED
}

enum InterviewResultEnum{
    PENDING
    ACCEPTED
    REJECTED
}

input RequestInput{
    information: ReaderRequestInput
    answers: [AnswerInput]
}

extend type Query {
    getListRequest: [Request]
    getRequestById(requestId: ID!): Request
    getRequestByReaderId(readerId: ID!): Request
}

extend type Mutation {
    updateRequestInterview(staffId : ID!, requestId: ID!, interviewAt: String!, description: String): Request
    rejectRequest(staffId: ID!, requestId: ID!, description: String): Request
    acceptRequest(staffId: ID!, requestId: ID!, description: String): Request
}

